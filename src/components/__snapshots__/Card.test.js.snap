// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Card renders correctly 1`] = `
.c8 {
  display: block;
}

.c7 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 900;
  line-height: normal;
  -webkit-letter-spacing: 0;
  -moz-letter-spacing: 0;
  -ms-letter-spacing: 0;
  letter-spacing: 0;
  color: rgba(0,0,0,.82);
  font-size: 24px;
}

.c7 + small {
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 16px;
  -webkit-letter-spacing: 0.16px;
  -moz-letter-spacing: 0.16px;
  -ms-letter-spacing: 0.16px;
  letter-spacing: 0.16px;
  font-weight: 400;
  line-height: normal;
  color: rgba(0,0,0,.82);
}

.c10 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-family: Merriweather,Georgia,serif;
  font-size: 12px;
  font-weight: 700;
  -webkit-text-decoration-line: underline;
  text-decoration-line: underline;
  padding: 0 8px 0 0;
  white-space: nowrap;
  display: inline-block;
  color: rgba(0,0,0,.82);
}

.c5 {
  display: block;
  font-weight: 500;
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 12px;
  padding-bottom: 8px;
  color: rgba(0,0,0,.82);
}

.c0 {
  padding: 16px 0;
}

.c1 {
  display: grid;
  grid-gap: 16px;
  grid-template-columns: false;
}

.c2 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  overflow: hidden;
}

.c9 {
  min-width: 0px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c4 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c6 {
  padding-bottom: 16px;
}

<ThemeProvider
  theme={
    Object {
      "breakpoint": Object {
        "lg": "1184px",
        "md": "980px",
        "mg": "1920px",
        "sm": "768px",
        "xl": "1366px",
        "xs": "480px",
      },
      "color": Object {
        "black": "rgba(0, 0, 0, .82)",
        "coffee": "rgba(145, 107, 85, 1)",
        "darkGrey": "rgba(79, 79, 79, 1)",
        "grey": "rgba(0, 0, 0, .32)",
        "lightCoffee": "rgba(249, 245, 242, 1)",
        "lightGrey": "rgba(0, 0, 0, .05)",
        "mediumGrey": "rgba(0, 0, 0, .38)",
        "paleGrey": "rgba(242, 242, 242, 1)",
        "white": "rgba(255, 255, 255, 1)",
      },
      "typography": Object {
        "__esModule": true,
        "baseFontSize": Size {
          "_rank": 2,
        },
        "baseLineHeight": "normal",
        "primaryFont": Object {
          "fontFamily": "Merriweather, Georgia, serif",
          "hover": "rgba(0, 0, 0, .82)",
        },
        "secondaryFont": Object {
          "fontFamily": "Lato, Geneva, Tahoma, sans-serif",
          "hover": "rgba(0, 0, 0, .82)",
        },
      },
      "zIndexRank": Object {
        "0": "0",
        "1": "100",
        "2": "200",
        "3": "300",
        "4": "400",
        "5": "500",
        "6": "600",
        "7": "700",
        "8": "800",
        "9": "900",
        "bottom": "-100",
        "top": "1000",
      },
    }
  }
>
  <Card
    context="featured"
    description="description"
    image={
      Object {
        "fixed": Object {
          "base64": "base64",
          "height": 1,
          "src": "src",
          "srcSet": "srcSet",
          "srcSetWebp": "srcSetWebp",
          "srcWebp": "srcWebp",
          "tracedSVG": "tracedSVG",
          "width": 1,
        },
      }
    }
    overline="overline"
    replaceOnTagNavigate={false}
    slug="slug"
    tags={
      Array [
        "test",
        "test-too",
      ]
    }
    title="title"
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htoDjs",
              "isStatic": true,
              "lastClassName": "c0",
              "rules": Array [
                "
  padding: ",
                "16px",
                " 0;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htoDjs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="c0"
        >
          <styled.div
            context="featured"
          >
            <StyledComponent
              context="featured"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      [Function],
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c1"
              >
                <Styled(Styled(UnstyledLink))
                  to="slug"
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            [Function],
                            [Function],
                          ],
                        },
                        "displayName": "Styled(Styled(UnstyledLink))",
                        "foldedComponentIds": Array [
                          "sc-bwzfXH",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    to="slug"
                  >
                    <UnstyledLink
                      className="c2"
                      to="slug"
                    >
                      <mockConstructor
                        className="c2"
                        to="slug"
                      >
                        <a
                          className="c2"
                          href="slug"
                        >
                          <Image
                            alt="title"
                            fixed={
                              Object {
                                "base64": "base64",
                                "height": 1,
                                "src": "src",
                                "srcSet": "srcSet",
                                "srcSetWebp": "srcSetWebp",
                                "srcWebp": "srcWebp",
                                "tracedSVG": "tracedSVG",
                                "width": 1,
                              }
                            }
                          >
                            <Image
                              Tag="div"
                              alt="title"
                              critical={false}
                              fadeIn={true}
                              fixed={
                                Object {
                                  "base64": "base64",
                                  "height": 1,
                                  "src": "src",
                                  "srcSet": "srcSet",
                                  "srcSetWebp": "srcSetWebp",
                                  "srcWebp": "srcWebp",
                                  "tracedSVG": "tracedSVG",
                                  "width": 1,
                                }
                              }
                            >
                              <div
                                className=" gatsby-image-wrapper"
                                key="fixed-\\"srcSet\\""
                                style={
                                  Object {
                                    "display": "inline-block",
                                    "height": 1,
                                    "overflow": "hidden",
                                    "position": "relative",
                                    "width": 1,
                                  }
                                }
                              >
                                <ForwardRef
                                  alt=""
                                  src="base64"
                                  style={
                                    Object {
                                      "opacity": 1,
                                      "transition": "opacity 0.5s",
                                      "transitionDelay": "0.25s",
                                    }
                                  }
                                >
                                  <img
                                    alt=""
                                    src="base64"
                                    style={
                                      Object {
                                        "height": "100%",
                                        "left": 0,
                                        "objectFit": "cover",
                                        "objectPosition": "center",
                                        "opacity": 1,
                                        "position": "absolute",
                                        "top": 0,
                                        "transition": "opacity 0.5s",
                                        "transitionDelay": "0.25s",
                                        "width": "100%",
                                      }
                                    }
                                  />
                                </ForwardRef>
                                <ForwardRef
                                  alt=""
                                  src="tracedSVG"
                                  style={
                                    Object {
                                      "opacity": 1,
                                      "transition": "opacity 0.5s",
                                      "transitionDelay": "0.25s",
                                    }
                                  }
                                >
                                  <img
                                    alt=""
                                    src="tracedSVG"
                                    style={
                                      Object {
                                        "height": "100%",
                                        "left": 0,
                                        "objectFit": "cover",
                                        "objectPosition": "center",
                                        "opacity": 1,
                                        "position": "absolute",
                                        "top": 0,
                                        "transition": "opacity 0.5s",
                                        "transitionDelay": "0.25s",
                                        "width": "100%",
                                      }
                                    }
                                  />
                                </ForwardRef>
                                <picture>
                                  <source
                                    srcSet="srcSetWebp"
                                    type="image/webp"
                                  />
                                  <ForwardRef
                                    alt="title"
                                    height={1}
                                    onLoad={[Function]}
                                    src="src"
                                    srcSet="srcSet"
                                    style={
                                      Object {
                                        "opacity": 0,
                                        "transition": "opacity 0.5s",
                                      }
                                    }
                                    width={1}
                                  >
                                    <img
                                      alt="title"
                                      height={1}
                                      onLoad={[Function]}
                                      src="src"
                                      srcSet="srcSet"
                                      style={
                                        Object {
                                          "height": "100%",
                                          "left": 0,
                                          "objectFit": "cover",
                                          "objectPosition": "center",
                                          "opacity": 0,
                                          "position": "absolute",
                                          "top": 0,
                                          "transition": "opacity 0.5s",
                                          "width": "100%",
                                        }
                                      }
                                      width={1}
                                    />
                                  </ForwardRef>
                                </picture>
                                <noscript
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "<picture><source type='image/webp' srcset=\\"srcSetWebp\\" /><img width=\\"1\\" height=\\"1\\" srcset=\\"srcSet\\" src=\\"src\\" alt=\\"title\\" style=\\"position:absolute;top:0;left:0;transition:opacity 0.5s;transition-delay:0.5s;opacity:1;width:100%;height:100%;object-fit:cover;object-position:center\\"/></picture>",
                                    }
                                  }
                                />
                              </div>
                            </Image>
                          </Image>
                        </a>
                      </mockConstructor>
                    </UnstyledLink>
                  </StyledComponent>
                </Styled(Styled(UnstyledLink))>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gZMcBi",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gZMcBi",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c3"
                    >
                      <Styled(Styled(UnstyledLink))
                        to="slug"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "c4",
                                "rules": Array [
                                  [Function],
                                  [Function],
                                ],
                              },
                              "displayName": "Styled(Styled(UnstyledLink))",
                              "foldedComponentIds": Array [
                                "sc-bwzfXH",
                              ],
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          to="slug"
                        >
                          <UnstyledLink
                            className="c4"
                            to="slug"
                          >
                            <mockConstructor
                              className="c4"
                              to="slug"
                            >
                              <a
                                className="c4"
                                href="slug"
                              >
                                <styled.span>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-gzVnrw",
                                          "isStatic": false,
                                          "lastClassName": "c5",
                                          "rules": Array [
                                            [Function],
                                          ],
                                        },
                                        "displayName": "styled.span",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-gzVnrw",
                                        "target": "span",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <span
                                      className="c5"
                                    >
                                      overline
                                    </span>
                                  </StyledComponent>
                                </styled.span>
                                <Styled(Heading)
                                  level={1}
                                  sub="description"
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-jTzLTM",
                                          "isStatic": false,
                                          "lastClassName": "c6",
                                          "rules": Array [
                                            [Function],
                                          ],
                                        },
                                        "displayName": "Styled(Heading)",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-jTzLTM",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    level={1}
                                    sub="description"
                                  >
                                    <Heading
                                      className="c6"
                                      level={1}
                                      sub="description"
                                    >
                                      <styled.h1
                                        className="c6"
                                      >
                                        <StyledComponent
                                          className="c6"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-bxivhb",
                                                "isStatic": false,
                                                "lastClassName": "c7",
                                                "rules": Array [
                                                  [Function],
                                                ],
                                              },
                                              "displayName": "styled.h1",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-bxivhb",
                                              "target": "h1",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <h1
                                            className="c6 c7"
                                          >
                                            title
                                          </h1>
                                        </StyledComponent>
                                      </styled.h1>
                                      <styled.small
                                        className="c6"
                                      >
                                        <StyledComponent
                                          className="c6"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-htpNat",
                                                "isStatic": true,
                                                "lastClassName": "c8",
                                                "rules": Array [
                                                  "
  display: block;
",
                                                ],
                                              },
                                              "displayName": "styled.small",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-htpNat",
                                              "target": "small",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <small
                                            className="c6 c8"
                                          >
                                            description
                                          </small>
                                        </StyledComponent>
                                      </styled.small>
                                    </Heading>
                                  </StyledComponent>
                                </Styled(Heading)>
                              </a>
                            </mockConstructor>
                          </UnstyledLink>
                        </StyledComponent>
                      </Styled(Styled(UnstyledLink))>
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gqjmRU",
                                "isStatic": false,
                                "lastClassName": "c9",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gqjmRU",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c9"
                          >
                            <Component
                              key="test"
                              to="/search?query=test"
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bZQynM",
                                      "isStatic": false,
                                      "lastClassName": "c10",
                                      "rules": Array [
                                        [Function],
                                        [Function],
                                      ],
                                    },
                                    "displayName": "Styled(Styled(UnstyledLink))",
                                    "foldedComponentIds": Array [
                                      "sc-bwzfXH",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-bZQynM",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                to="/search?query=test"
                              >
                                <UnstyledLink
                                  className="c10"
                                  to="/search?query=test"
                                >
                                  <mockConstructor
                                    className="c10"
                                    to="/search?query=test"
                                  >
                                    <a
                                      className="c10"
                                      href="/search?query=test"
                                    >
                                      #Test
                                    </a>
                                  </mockConstructor>
                                </UnstyledLink>
                              </StyledComponent>
                            </Component>
                            <Component
                              key="test-too"
                              to="/search?query=test-too"
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bZQynM",
                                      "isStatic": false,
                                      "lastClassName": "c10",
                                      "rules": Array [
                                        [Function],
                                        [Function],
                                      ],
                                    },
                                    "displayName": "Styled(Styled(UnstyledLink))",
                                    "foldedComponentIds": Array [
                                      "sc-bwzfXH",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-bZQynM",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                to="/search?query=test-too"
                              >
                                <UnstyledLink
                                  className="c10"
                                  to="/search?query=test-too"
                                >
                                  <mockConstructor
                                    className="c10"
                                    to="/search?query=test-too"
                                  >
                                    <a
                                      className="c10"
                                      href="/search?query=test-too"
                                    >
                                      #TestToo
                                    </a>
                                  </mockConstructor>
                                </UnstyledLink>
                              </StyledComponent>
                            </Component>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </StyledComponent>
    </styled.div>
  </Card>
</ThemeProvider>
`;
