// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Card with context featured renders correctly 1`] = `
.c8 {
  display: block;
}

.c7 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 900;
  line-height: normal;
  -webkit-letter-spacing: 0;
  -moz-letter-spacing: 0;
  -ms-letter-spacing: 0;
  letter-spacing: 0;
  color: hsla(44,8%,18%,1);
  font-size: 24px;
}

.c7 + small {
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 16px letter-spacing:0.16px;
  font-weight: 400;
  line-height: normal;
  color: hsla(44,8%,18%,1);
}

.c10 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-family: Merriweather,Georgia,serif;
  font-size: 12px;
  font-weight: 700;
  -webkit-text-decoration-line: underline;
  text-decoration-line: underline;
  padding: 0 8px 0 0;
  white-space: nowrap;
  display: inline-block;
  color: hsla(44,8%,18%,1);
}

.c5 {
  display: block;
  font-weight: 500;
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 12px;
  padding-bottom: 8px;
  color: hsla(44,8%,18%,1);
}

.c0 {
  padding: 16px 0;
}

.c1 {
  height: 100%;
  display: grid;
  grid-gap: 16px;
}

.c2 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  overflow: hidden;
}

.c9 {
  min-width: 0px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c4 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c6 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.c6 + small {
  padding: 16px 0;
}

<ThemeProvider
  theme={
    Object {
      "breakpoint": Object {
        "lg": "1184px",
        "md": "980px",
        "mg": "1920px",
        "sm": "768px",
        "xl": "1366px",
        "xs": "480px",
      },
      "color": Object {
        "brand100": "hsla(23,92%,95%,1)",
        "brand200": "hsla(23,92%,82%,1)",
        "brand300": "hsla(23,92%,67%,1)",
        "brand400": "hsla(23,92%,52%,1)",
        "brand500": "hsla(23,92%,35%,1)",
        "brand600": "hsla(23,92%,18%,1)",
        "dark100": "hsla(44,8%,95%,1)",
        "dark200": "hsla(44,8%,82%,1)",
        "dark300": "hsla(44,8%,67%,1)",
        "dark400": "hsla(44,8%,52%,1)",
        "dark500": "hsla(44,8%,35%,1)",
        "dark600": "hsla(44,8%,18%,1)",
        "light": "hsla(0,100%,100%, 1)",
        "withTransparency": Object {
          "brand100": "hsla(23,92%,95%,.5)",
          "brand200": "hsla(23,92%,82%,.5)",
          "brand300": "hsla(23,92%,67%,.5)",
          "brand400": "hsla(23,92%,52%,.5)",
          "brand500": "hsla(23,92%,35%,.5)",
          "brand600": "hsla(23,92%,18%,.5)",
          "dark100": "hsla(44,8%,95%,.5)",
          "dark200": "hsla(44,8%,82%,.5)",
          "dark300": "hsla(44,8%,67%,.5)",
          "dark400": "hsla(44,8%,52%,.5)",
          "dark500": "hsla(44,8%,35%,.5)",
          "dark600": "hsla(44,8%,18%,.5)",
          "light": "hsla(0,100%,100%, .5)",
        },
      },
      "typography": Object {
        "__esModule": true,
        "baseFontSize": Size {
          "_rank": 2,
        },
        "baseLineHeight": "normal",
        "primaryFont": Object {
          "fontFamily": "Merriweather, Georgia, serif",
          "hover": "hsla(44,8%,18%,1)",
        },
        "secondaryFont": Object {
          "fontFamily": "Lato, Geneva, Tahoma, sans-serif",
          "hover": "hsla(44,8%,18%,1)",
        },
      },
      "zIndexRank": Object {
        "0": "0",
        "1": "100",
        "2": "200",
        "3": "300",
        "4": "400",
        "5": "500",
        "6": "600",
        "7": "700",
        "8": "800",
        "9": "900",
        "bottom": "-100",
        "top": "1000",
      },
    }
  }
>
  <Card
    context="featured"
    description="description"
    image={
      Object {
        "fixed": Object {
          "base64": "base64",
          "height": 1,
          "src": "src",
          "srcSet": "srcSet",
          "srcSetWebp": "srcSetWebp",
          "srcWebp": "srcWebp",
          "tracedSVG": "tracedSVG",
          "width": 1,
        },
      }
    }
    overline="overline"
    replaceOnTagNavigate={false}
    slug="slug"
    tags={
      Array [
        "test",
        "test-too",
      ]
    }
    title="title"
  >
    <styled.div
      context="featured"
    >
      <div
        className="c0"
      >
        <styled.div
          context="featured"
        >
          <div
            className="c1"
          >
            <Styled(Styled(UnstyledLink))
              to="slug"
            >
              <UnstyledLink
                className="sc-AxirZ c2"
                to="slug"
              >
                <mockConstructor
                  className="sc-AxirZ c2"
                  to="slug"
                >
                  <a
                    className="sc-AxirZ c2"
                    href="slug"
                  >
                    <Styled(Image)
                      alt="title"
                      context="featured"
                      fixed={
                        Object {
                          "base64": "base64",
                          "height": 1,
                          "src": "src",
                          "srcSet": "srcSet",
                          "srcSetWebp": "srcSetWebp",
                          "srcWebp": "srcWebp",
                          "tracedSVG": "tracedSVG",
                          "width": 1,
                        }
                      }
                    >
                      <Image
                        Tag="div"
                        alt="title"
                        className=""
                        context="featured"
                        durationFadeIn={500}
                        fadeIn={true}
                        fixed={
                          Object {
                            "base64": "base64",
                            "height": 1,
                            "src": "src",
                            "srcSet": "srcSet",
                            "srcSetWebp": "srcSetWebp",
                            "srcWebp": "srcWebp",
                            "tracedSVG": "tracedSVG",
                            "width": 1,
                          }
                        }
                        loading="lazy"
                      >
                        <div
                          className="gatsby-image-wrapper"
                          key="fixed-\\"srcSet\\""
                          style={
                            Object {
                              "display": "inline-block",
                              "height": 1,
                              "overflow": "hidden",
                              "position": "relative",
                              "width": 1,
                            }
                          }
                        >
                          <ForwardRef
                            ariaHidden={true}
                            generateSources={[Function]}
                            imageVariants={
                              Array [
                                Object {
                                  "base64": "base64",
                                  "height": 1,
                                  "src": "src",
                                  "srcSet": "srcSet",
                                  "srcSetWebp": "srcSetWebp",
                                  "srcWebp": "srcWebp",
                                  "tracedSVG": "tracedSVG",
                                  "width": 1,
                                },
                              ]
                            }
                            spreadProps={
                              Object {
                                "alt": "",
                                "className": undefined,
                                "itemProp": undefined,
                                "style": Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                },
                                "title": undefined,
                              }
                            }
                            src="base64"
                          >
                            <ForwardRef
                              alt=""
                              ariaHidden={true}
                              src="base64"
                              style={
                                Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                }
                              }
                            >
                              <img
                                alt=""
                                aria-hidden={true}
                                src="base64"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 1,
                                    "position": "absolute",
                                    "top": 0,
                                    "transitionDelay": "500ms",
                                    "width": "100%",
                                  }
                                }
                              />
                            </ForwardRef>
                          </ForwardRef>
                          <ForwardRef
                            ariaHidden={true}
                            generateSources={[Function]}
                            imageVariants={
                              Array [
                                Object {
                                  "base64": "base64",
                                  "height": 1,
                                  "src": "src",
                                  "srcSet": "srcSet",
                                  "srcSetWebp": "srcSetWebp",
                                  "srcWebp": "srcWebp",
                                  "tracedSVG": "tracedSVG",
                                  "width": 1,
                                },
                              ]
                            }
                            spreadProps={
                              Object {
                                "alt": "",
                                "className": undefined,
                                "itemProp": undefined,
                                "style": Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                },
                                "title": undefined,
                              }
                            }
                            src="tracedSVG"
                          >
                            <ForwardRef
                              alt=""
                              ariaHidden={true}
                              src="tracedSVG"
                              style={
                                Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                }
                              }
                            >
                              <img
                                alt=""
                                aria-hidden={true}
                                src="tracedSVG"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 1,
                                    "position": "absolute",
                                    "top": 0,
                                    "transitionDelay": "500ms",
                                    "width": "100%",
                                  }
                                }
                              />
                            </ForwardRef>
                          </ForwardRef>
                          <picture>
                            <source
                              srcSet="srcSetWebp"
                              type="image/webp"
                            />
                            <source
                              srcSet="srcSet"
                            />
                            <ForwardRef
                              alt="title"
                              height={1}
                              loading="lazy"
                              onLoad={[Function]}
                              src="src"
                              srcSet="srcSet"
                              style={
                                Object {
                                  "opacity": 0,
                                  "transition": "opacity 500ms",
                                }
                              }
                              width={1}
                            >
                              <img
                                alt="title"
                                height={1}
                                loading="lazy"
                                onLoad={[Function]}
                                src="src"
                                srcSet="srcSet"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 0,
                                    "position": "absolute",
                                    "top": 0,
                                    "transition": "opacity 500ms",
                                    "width": "100%",
                                  }
                                }
                                width={1}
                              />
                            </ForwardRef>
                          </picture>
                          <noscript
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<picture><source type='image/webp' srcset=\\"srcSetWebp\\" /><source srcset=\\"srcSet\\" /><img loading=\\"lazy\\" width=\\"1\\" height=\\"1\\" srcset=\\"srcSet\\" src=\\"src\\" alt=\\"title\\" style=\\"position:absolute;top:0;left:0;opacity:1;width:100%;height:100%;object-fit:cover;object-position:center\\"/></picture>",
                              }
                            }
                          />
                        </div>
                      </Image>
                    </Styled(Image)>
                  </a>
                </mockConstructor>
              </UnstyledLink>
            </Styled(Styled(UnstyledLink))>
            <styled.div
              context="featured"
            >
              <div
                className="c3"
              >
                <Styled(Styled(UnstyledLink))
                  to="slug"
                >
                  <UnstyledLink
                    className="sc-AxirZ c4"
                    to="slug"
                  >
                    <mockConstructor
                      className="sc-AxirZ c4"
                      to="slug"
                    >
                      <a
                        className="sc-AxirZ c4"
                        href="slug"
                      >
                        <styled.span>
                          <span
                            className="c5"
                          >
                            overline
                          </span>
                        </styled.span>
                        <Styled(Heading)
                          level={1}
                          sub="description"
                        >
                          <Heading
                            className="c6"
                            level={1}
                            sub="description"
                          >
                            <styled.h1
                              className="c6"
                            >
                              <h1
                                className="c7 c6"
                              >
                                title
                              </h1>
                            </styled.h1>
                            <styled.small
                              className="c6"
                            >
                              <small
                                className="c8 c6"
                              >
                                description
                              </small>
                            </styled.small>
                          </Heading>
                        </Styled(Heading)>
                      </a>
                    </mockConstructor>
                  </UnstyledLink>
                </Styled(Styled(UnstyledLink))>
                <styled.div>
                  <div
                    className="c9"
                  >
                    <Memo()
                      key="test"
                      to="/search?query=test"
                    >
                      <Styled(Styled(UnstyledLink))
                        to="/search?query=test"
                      >
                        <UnstyledLink
                          className="sc-AxirZ c10"
                          to="/search?query=test"
                        >
                          <mockConstructor
                            className="sc-AxirZ c10"
                            to="/search?query=test"
                          >
                            <a
                              className="sc-AxirZ c10"
                              href="/search?query=test"
                            >
                              #Test
                            </a>
                          </mockConstructor>
                        </UnstyledLink>
                      </Styled(Styled(UnstyledLink))>
                    </Memo()>
                    <Memo()
                      key="test-too"
                      to="/search?query=test-too"
                    >
                      <Styled(Styled(UnstyledLink))
                        to="/search?query=test-too"
                      >
                        <UnstyledLink
                          className="sc-AxirZ c10"
                          to="/search?query=test-too"
                        >
                          <mockConstructor
                            className="sc-AxirZ c10"
                            to="/search?query=test-too"
                          >
                            <a
                              className="sc-AxirZ c10"
                              href="/search?query=test-too"
                            >
                              #TestToo
                            </a>
                          </mockConstructor>
                        </UnstyledLink>
                      </Styled(Styled(UnstyledLink))>
                    </Memo()>
                  </div>
                </styled.div>
              </div>
            </styled.div>
          </div>
        </styled.div>
      </div>
    </styled.div>
  </Card>
</ThemeProvider>
`;

exports[`Card with context list renders correctly 1`] = `
.c8 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 900;
  line-height: normal;
  -webkit-letter-spacing: 0;
  -moz-letter-spacing: 0;
  -ms-letter-spacing: 0;
  letter-spacing: 0;
  color: hsla(44,8%,18%,1);
  font-size: 18px;
}

.c8 + small {
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 14px letter-spacing:0.1px;
  font-weight: 400;
  line-height: normal;
  color: hsla(44,8%,18%,1);
}

.c10 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-family: Merriweather,Georgia,serif;
  font-size: 12px;
  font-weight: 700;
  -webkit-text-decoration-line: underline;
  text-decoration-line: underline;
  padding: 0 8px 0 0;
  white-space: nowrap;
  display: inline-block;
  color: hsla(44,8%,18%,1);
}

.c6 {
  display: block;
  font-weight: 500;
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 12px;
  padding-bottom: 8px;
  color: hsla(44,8%,18%,1);
}

.c0 {
  padding: 16px 0;
  height: 192px;
}

.c1 {
  height: 100%;
  display: grid;
  grid-gap: 16px;
  grid-template-columns: 1fr 2fr;
}

.c2 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
}

.c3 {
  height: 100%;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  overflow: hidden;
}

.c9 {
  min-width: 0px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c7 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.c7 + small {
  padding: 16px 0;
}

<ThemeProvider
  theme={
    Object {
      "breakpoint": Object {
        "lg": "1184px",
        "md": "980px",
        "mg": "1920px",
        "sm": "768px",
        "xl": "1366px",
        "xs": "480px",
      },
      "color": Object {
        "brand100": "hsla(23,92%,95%,1)",
        "brand200": "hsla(23,92%,82%,1)",
        "brand300": "hsla(23,92%,67%,1)",
        "brand400": "hsla(23,92%,52%,1)",
        "brand500": "hsla(23,92%,35%,1)",
        "brand600": "hsla(23,92%,18%,1)",
        "dark100": "hsla(44,8%,95%,1)",
        "dark200": "hsla(44,8%,82%,1)",
        "dark300": "hsla(44,8%,67%,1)",
        "dark400": "hsla(44,8%,52%,1)",
        "dark500": "hsla(44,8%,35%,1)",
        "dark600": "hsla(44,8%,18%,1)",
        "light": "hsla(0,100%,100%, 1)",
        "withTransparency": Object {
          "brand100": "hsla(23,92%,95%,.5)",
          "brand200": "hsla(23,92%,82%,.5)",
          "brand300": "hsla(23,92%,67%,.5)",
          "brand400": "hsla(23,92%,52%,.5)",
          "brand500": "hsla(23,92%,35%,.5)",
          "brand600": "hsla(23,92%,18%,.5)",
          "dark100": "hsla(44,8%,95%,.5)",
          "dark200": "hsla(44,8%,82%,.5)",
          "dark300": "hsla(44,8%,67%,.5)",
          "dark400": "hsla(44,8%,52%,.5)",
          "dark500": "hsla(44,8%,35%,.5)",
          "dark600": "hsla(44,8%,18%,.5)",
          "light": "hsla(0,100%,100%, .5)",
        },
      },
      "typography": Object {
        "__esModule": true,
        "baseFontSize": Size {
          "_rank": 2,
        },
        "baseLineHeight": "normal",
        "primaryFont": Object {
          "fontFamily": "Merriweather, Georgia, serif",
          "hover": "hsla(44,8%,18%,1)",
        },
        "secondaryFont": Object {
          "fontFamily": "Lato, Geneva, Tahoma, sans-serif",
          "hover": "hsla(44,8%,18%,1)",
        },
      },
      "zIndexRank": Object {
        "0": "0",
        "1": "100",
        "2": "200",
        "3": "300",
        "4": "400",
        "5": "500",
        "6": "600",
        "7": "700",
        "8": "800",
        "9": "900",
        "bottom": "-100",
        "top": "1000",
      },
    }
  }
>
  <Card
    context="list"
    description="description"
    image={
      Object {
        "fixed": Object {
          "base64": "base64",
          "height": 1,
          "src": "src",
          "srcSet": "srcSet",
          "srcSetWebp": "srcSetWebp",
          "srcWebp": "srcWebp",
          "tracedSVG": "tracedSVG",
          "width": 1,
        },
      }
    }
    overline="overline"
    replaceOnTagNavigate={false}
    slug="slug"
    tags={
      Array [
        "test",
        "test-too",
      ]
    }
    title="title"
  >
    <styled.div
      context="list"
    >
      <div
        className="c0"
      >
        <styled.div
          context="list"
        >
          <div
            className="c1"
          >
            <Styled(Styled(UnstyledLink))
              to="slug"
            >
              <UnstyledLink
                className="sc-AxirZ c2"
                to="slug"
              >
                <mockConstructor
                  className="sc-AxirZ c2"
                  to="slug"
                >
                  <a
                    className="sc-AxirZ c2"
                    href="slug"
                  >
                    <Styled(Image)
                      alt="title"
                      context="list"
                      fixed={
                        Object {
                          "base64": "base64",
                          "height": 1,
                          "src": "src",
                          "srcSet": "srcSet",
                          "srcSetWebp": "srcSetWebp",
                          "srcWebp": "srcWebp",
                          "tracedSVG": "tracedSVG",
                          "width": 1,
                        }
                      }
                    >
                      <Image
                        Tag="div"
                        alt="title"
                        className="c3"
                        context="list"
                        durationFadeIn={500}
                        fadeIn={true}
                        fixed={
                          Object {
                            "base64": "base64",
                            "height": 1,
                            "src": "src",
                            "srcSet": "srcSet",
                            "srcSetWebp": "srcSetWebp",
                            "srcWebp": "srcWebp",
                            "tracedSVG": "tracedSVG",
                            "width": 1,
                          }
                        }
                        loading="lazy"
                      >
                        <div
                          className="c3 gatsby-image-wrapper"
                          key="fixed-\\"srcSet\\""
                          style={
                            Object {
                              "display": "inline-block",
                              "height": 1,
                              "overflow": "hidden",
                              "position": "relative",
                              "width": 1,
                            }
                          }
                        >
                          <ForwardRef
                            ariaHidden={true}
                            generateSources={[Function]}
                            imageVariants={
                              Array [
                                Object {
                                  "base64": "base64",
                                  "height": 1,
                                  "src": "src",
                                  "srcSet": "srcSet",
                                  "srcSetWebp": "srcSetWebp",
                                  "srcWebp": "srcWebp",
                                  "tracedSVG": "tracedSVG",
                                  "width": 1,
                                },
                              ]
                            }
                            spreadProps={
                              Object {
                                "alt": "",
                                "className": undefined,
                                "itemProp": undefined,
                                "style": Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                },
                                "title": undefined,
                              }
                            }
                            src="base64"
                          >
                            <ForwardRef
                              alt=""
                              ariaHidden={true}
                              src="base64"
                              style={
                                Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                }
                              }
                            >
                              <img
                                alt=""
                                aria-hidden={true}
                                src="base64"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 1,
                                    "position": "absolute",
                                    "top": 0,
                                    "transitionDelay": "500ms",
                                    "width": "100%",
                                  }
                                }
                              />
                            </ForwardRef>
                          </ForwardRef>
                          <ForwardRef
                            ariaHidden={true}
                            generateSources={[Function]}
                            imageVariants={
                              Array [
                                Object {
                                  "base64": "base64",
                                  "height": 1,
                                  "src": "src",
                                  "srcSet": "srcSet",
                                  "srcSetWebp": "srcSetWebp",
                                  "srcWebp": "srcWebp",
                                  "tracedSVG": "tracedSVG",
                                  "width": 1,
                                },
                              ]
                            }
                            spreadProps={
                              Object {
                                "alt": "",
                                "className": undefined,
                                "itemProp": undefined,
                                "style": Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                },
                                "title": undefined,
                              }
                            }
                            src="tracedSVG"
                          >
                            <ForwardRef
                              alt=""
                              ariaHidden={true}
                              src="tracedSVG"
                              style={
                                Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                }
                              }
                            >
                              <img
                                alt=""
                                aria-hidden={true}
                                src="tracedSVG"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 1,
                                    "position": "absolute",
                                    "top": 0,
                                    "transitionDelay": "500ms",
                                    "width": "100%",
                                  }
                                }
                              />
                            </ForwardRef>
                          </ForwardRef>
                          <picture>
                            <source
                              srcSet="srcSetWebp"
                              type="image/webp"
                            />
                            <source
                              srcSet="srcSet"
                            />
                            <ForwardRef
                              alt="title"
                              height={1}
                              loading="lazy"
                              onLoad={[Function]}
                              src="src"
                              srcSet="srcSet"
                              style={
                                Object {
                                  "opacity": 0,
                                  "transition": "opacity 500ms",
                                }
                              }
                              width={1}
                            >
                              <img
                                alt="title"
                                height={1}
                                loading="lazy"
                                onLoad={[Function]}
                                src="src"
                                srcSet="srcSet"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 0,
                                    "position": "absolute",
                                    "top": 0,
                                    "transition": "opacity 500ms",
                                    "width": "100%",
                                  }
                                }
                                width={1}
                              />
                            </ForwardRef>
                          </picture>
                          <noscript
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<picture><source type='image/webp' srcset=\\"srcSetWebp\\" /><source srcset=\\"srcSet\\" /><img loading=\\"lazy\\" width=\\"1\\" height=\\"1\\" srcset=\\"srcSet\\" src=\\"src\\" alt=\\"title\\" style=\\"position:absolute;top:0;left:0;opacity:1;width:100%;height:100%;object-fit:cover;object-position:center\\"/></picture>",
                              }
                            }
                          />
                        </div>
                      </Image>
                    </Styled(Image)>
                  </a>
                </mockConstructor>
              </UnstyledLink>
            </Styled(Styled(UnstyledLink))>
            <styled.div
              context="list"
            >
              <div
                className="c4"
              >
                <Styled(Styled(UnstyledLink))
                  to="slug"
                >
                  <UnstyledLink
                    className="sc-AxirZ c5"
                    to="slug"
                  >
                    <mockConstructor
                      className="sc-AxirZ c5"
                      to="slug"
                    >
                      <a
                        className="sc-AxirZ c5"
                        href="slug"
                      >
                        <styled.span>
                          <span
                            className="c6"
                          >
                            overline
                          </span>
                        </styled.span>
                        <Styled(Heading)
                          level={3}
                        >
                          <Heading
                            className="c7"
                            level={3}
                          >
                            <styled.h3
                              className="c7"
                            >
                              <h3
                                className="c8 c7"
                              >
                                title
                              </h3>
                            </styled.h3>
                          </Heading>
                        </Styled(Heading)>
                      </a>
                    </mockConstructor>
                  </UnstyledLink>
                </Styled(Styled(UnstyledLink))>
                <styled.div>
                  <div
                    className="c9"
                  >
                    <Memo()
                      key="test"
                      to="/search?query=test"
                    >
                      <Styled(Styled(UnstyledLink))
                        to="/search?query=test"
                      >
                        <UnstyledLink
                          className="sc-AxirZ c10"
                          to="/search?query=test"
                        >
                          <mockConstructor
                            className="sc-AxirZ c10"
                            to="/search?query=test"
                          >
                            <a
                              className="sc-AxirZ c10"
                              href="/search?query=test"
                            >
                              #Test
                            </a>
                          </mockConstructor>
                        </UnstyledLink>
                      </Styled(Styled(UnstyledLink))>
                    </Memo()>
                    <Memo()
                      key="test-too"
                      to="/search?query=test-too"
                    >
                      <Styled(Styled(UnstyledLink))
                        to="/search?query=test-too"
                      >
                        <UnstyledLink
                          className="sc-AxirZ c10"
                          to="/search?query=test-too"
                        >
                          <mockConstructor
                            className="sc-AxirZ c10"
                            to="/search?query=test-too"
                          >
                            <a
                              className="sc-AxirZ c10"
                              href="/search?query=test-too"
                            >
                              #TestToo
                            </a>
                          </mockConstructor>
                        </UnstyledLink>
                      </Styled(Styled(UnstyledLink))>
                    </Memo()>
                  </div>
                </styled.div>
              </div>
            </styled.div>
          </div>
        </styled.div>
      </div>
    </styled.div>
  </Card>
</ThemeProvider>
`;

exports[`Card with context polaroid renders correctly 1`] = `
.c8 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 900;
  line-height: normal;
  -webkit-letter-spacing: 0;
  -moz-letter-spacing: 0;
  -ms-letter-spacing: 0;
  letter-spacing: 0;
  color: hsla(44,8%,18%,1);
  font-size: 18px;
}

.c8 + small {
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 14px letter-spacing:0.1px;
  font-weight: 400;
  line-height: normal;
  color: hsla(44,8%,18%,1);
}

.c10 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-family: Merriweather,Georgia,serif;
  font-size: 12px;
  font-weight: 700;
  -webkit-text-decoration-line: underline;
  text-decoration-line: underline;
  padding: 0 8px 0 0;
  white-space: nowrap;
  display: inline-block;
  color: hsla(44,8%,18%,1);
}

.c6 {
  display: block;
  font-weight: 500;
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 12px;
  padding-bottom: 8px;
  color: hsla(44,8%,18%,1);
}

.c0 {
  padding: 16px 0;
  height: 100%;
}

.c1 {
  height: 100%;
  display: grid;
  grid-gap: 16px;
  grid-template-rows: 2fr .75fr;
}

.c2 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
}

.c3 {
  height: 280px;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  overflow: hidden;
}

.c9 {
  min-width: 0px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c7 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.c7 + small {
  padding: 16px 0;
}

<ThemeProvider
  theme={
    Object {
      "breakpoint": Object {
        "lg": "1184px",
        "md": "980px",
        "mg": "1920px",
        "sm": "768px",
        "xl": "1366px",
        "xs": "480px",
      },
      "color": Object {
        "brand100": "hsla(23,92%,95%,1)",
        "brand200": "hsla(23,92%,82%,1)",
        "brand300": "hsla(23,92%,67%,1)",
        "brand400": "hsla(23,92%,52%,1)",
        "brand500": "hsla(23,92%,35%,1)",
        "brand600": "hsla(23,92%,18%,1)",
        "dark100": "hsla(44,8%,95%,1)",
        "dark200": "hsla(44,8%,82%,1)",
        "dark300": "hsla(44,8%,67%,1)",
        "dark400": "hsla(44,8%,52%,1)",
        "dark500": "hsla(44,8%,35%,1)",
        "dark600": "hsla(44,8%,18%,1)",
        "light": "hsla(0,100%,100%, 1)",
        "withTransparency": Object {
          "brand100": "hsla(23,92%,95%,.5)",
          "brand200": "hsla(23,92%,82%,.5)",
          "brand300": "hsla(23,92%,67%,.5)",
          "brand400": "hsla(23,92%,52%,.5)",
          "brand500": "hsla(23,92%,35%,.5)",
          "brand600": "hsla(23,92%,18%,.5)",
          "dark100": "hsla(44,8%,95%,.5)",
          "dark200": "hsla(44,8%,82%,.5)",
          "dark300": "hsla(44,8%,67%,.5)",
          "dark400": "hsla(44,8%,52%,.5)",
          "dark500": "hsla(44,8%,35%,.5)",
          "dark600": "hsla(44,8%,18%,.5)",
          "light": "hsla(0,100%,100%, .5)",
        },
      },
      "typography": Object {
        "__esModule": true,
        "baseFontSize": Size {
          "_rank": 2,
        },
        "baseLineHeight": "normal",
        "primaryFont": Object {
          "fontFamily": "Merriweather, Georgia, serif",
          "hover": "hsla(44,8%,18%,1)",
        },
        "secondaryFont": Object {
          "fontFamily": "Lato, Geneva, Tahoma, sans-serif",
          "hover": "hsla(44,8%,18%,1)",
        },
      },
      "zIndexRank": Object {
        "0": "0",
        "1": "100",
        "2": "200",
        "3": "300",
        "4": "400",
        "5": "500",
        "6": "600",
        "7": "700",
        "8": "800",
        "9": "900",
        "bottom": "-100",
        "top": "1000",
      },
    }
  }
>
  <Card
    context="polaroid"
    description="description"
    image={
      Object {
        "fixed": Object {
          "base64": "base64",
          "height": 1,
          "src": "src",
          "srcSet": "srcSet",
          "srcSetWebp": "srcSetWebp",
          "srcWebp": "srcWebp",
          "tracedSVG": "tracedSVG",
          "width": 1,
        },
      }
    }
    overline="overline"
    replaceOnTagNavigate={false}
    slug="slug"
    tags={
      Array [
        "test",
        "test-too",
      ]
    }
    title="title"
  >
    <styled.div
      context="polaroid"
    >
      <div
        className="c0"
      >
        <styled.div
          context="polaroid"
        >
          <div
            className="c1"
          >
            <Styled(Styled(UnstyledLink))
              to="slug"
            >
              <UnstyledLink
                className="sc-AxirZ c2"
                to="slug"
              >
                <mockConstructor
                  className="sc-AxirZ c2"
                  to="slug"
                >
                  <a
                    className="sc-AxirZ c2"
                    href="slug"
                  >
                    <Styled(Image)
                      alt="title"
                      context="polaroid"
                      fixed={
                        Object {
                          "base64": "base64",
                          "height": 1,
                          "src": "src",
                          "srcSet": "srcSet",
                          "srcSetWebp": "srcSetWebp",
                          "srcWebp": "srcWebp",
                          "tracedSVG": "tracedSVG",
                          "width": 1,
                        }
                      }
                    >
                      <Image
                        Tag="div"
                        alt="title"
                        className="c3"
                        context="polaroid"
                        durationFadeIn={500}
                        fadeIn={true}
                        fixed={
                          Object {
                            "base64": "base64",
                            "height": 1,
                            "src": "src",
                            "srcSet": "srcSet",
                            "srcSetWebp": "srcSetWebp",
                            "srcWebp": "srcWebp",
                            "tracedSVG": "tracedSVG",
                            "width": 1,
                          }
                        }
                        loading="lazy"
                      >
                        <div
                          className="c3 gatsby-image-wrapper"
                          key="fixed-\\"srcSet\\""
                          style={
                            Object {
                              "display": "inline-block",
                              "height": 1,
                              "overflow": "hidden",
                              "position": "relative",
                              "width": 1,
                            }
                          }
                        >
                          <ForwardRef
                            ariaHidden={true}
                            generateSources={[Function]}
                            imageVariants={
                              Array [
                                Object {
                                  "base64": "base64",
                                  "height": 1,
                                  "src": "src",
                                  "srcSet": "srcSet",
                                  "srcSetWebp": "srcSetWebp",
                                  "srcWebp": "srcWebp",
                                  "tracedSVG": "tracedSVG",
                                  "width": 1,
                                },
                              ]
                            }
                            spreadProps={
                              Object {
                                "alt": "",
                                "className": undefined,
                                "itemProp": undefined,
                                "style": Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                },
                                "title": undefined,
                              }
                            }
                            src="base64"
                          >
                            <ForwardRef
                              alt=""
                              ariaHidden={true}
                              src="base64"
                              style={
                                Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                }
                              }
                            >
                              <img
                                alt=""
                                aria-hidden={true}
                                src="base64"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 1,
                                    "position": "absolute",
                                    "top": 0,
                                    "transitionDelay": "500ms",
                                    "width": "100%",
                                  }
                                }
                              />
                            </ForwardRef>
                          </ForwardRef>
                          <ForwardRef
                            ariaHidden={true}
                            generateSources={[Function]}
                            imageVariants={
                              Array [
                                Object {
                                  "base64": "base64",
                                  "height": 1,
                                  "src": "src",
                                  "srcSet": "srcSet",
                                  "srcSetWebp": "srcSetWebp",
                                  "srcWebp": "srcWebp",
                                  "tracedSVG": "tracedSVG",
                                  "width": 1,
                                },
                              ]
                            }
                            spreadProps={
                              Object {
                                "alt": "",
                                "className": undefined,
                                "itemProp": undefined,
                                "style": Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                },
                                "title": undefined,
                              }
                            }
                            src="tracedSVG"
                          >
                            <ForwardRef
                              alt=""
                              ariaHidden={true}
                              src="tracedSVG"
                              style={
                                Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                }
                              }
                            >
                              <img
                                alt=""
                                aria-hidden={true}
                                src="tracedSVG"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 1,
                                    "position": "absolute",
                                    "top": 0,
                                    "transitionDelay": "500ms",
                                    "width": "100%",
                                  }
                                }
                              />
                            </ForwardRef>
                          </ForwardRef>
                          <picture>
                            <source
                              srcSet="srcSetWebp"
                              type="image/webp"
                            />
                            <source
                              srcSet="srcSet"
                            />
                            <ForwardRef
                              alt="title"
                              height={1}
                              loading="lazy"
                              onLoad={[Function]}
                              src="src"
                              srcSet="srcSet"
                              style={
                                Object {
                                  "opacity": 0,
                                  "transition": "opacity 500ms",
                                }
                              }
                              width={1}
                            >
                              <img
                                alt="title"
                                height={1}
                                loading="lazy"
                                onLoad={[Function]}
                                src="src"
                                srcSet="srcSet"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 0,
                                    "position": "absolute",
                                    "top": 0,
                                    "transition": "opacity 500ms",
                                    "width": "100%",
                                  }
                                }
                                width={1}
                              />
                            </ForwardRef>
                          </picture>
                          <noscript
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<picture><source type='image/webp' srcset=\\"srcSetWebp\\" /><source srcset=\\"srcSet\\" /><img loading=\\"lazy\\" width=\\"1\\" height=\\"1\\" srcset=\\"srcSet\\" src=\\"src\\" alt=\\"title\\" style=\\"position:absolute;top:0;left:0;opacity:1;width:100%;height:100%;object-fit:cover;object-position:center\\"/></picture>",
                              }
                            }
                          />
                        </div>
                      </Image>
                    </Styled(Image)>
                  </a>
                </mockConstructor>
              </UnstyledLink>
            </Styled(Styled(UnstyledLink))>
            <styled.div
              context="polaroid"
            >
              <div
                className="c4"
              >
                <Styled(Styled(UnstyledLink))
                  to="slug"
                >
                  <UnstyledLink
                    className="sc-AxirZ c5"
                    to="slug"
                  >
                    <mockConstructor
                      className="sc-AxirZ c5"
                      to="slug"
                    >
                      <a
                        className="sc-AxirZ c5"
                        href="slug"
                      >
                        <styled.span>
                          <span
                            className="c6"
                          >
                            overline
                          </span>
                        </styled.span>
                        <Styled(Heading)
                          level={3}
                        >
                          <Heading
                            className="c7"
                            level={3}
                          >
                            <styled.h3
                              className="c7"
                            >
                              <h3
                                className="c8 c7"
                              >
                                title
                              </h3>
                            </styled.h3>
                          </Heading>
                        </Styled(Heading)>
                      </a>
                    </mockConstructor>
                  </UnstyledLink>
                </Styled(Styled(UnstyledLink))>
                <styled.div>
                  <div
                    className="c9"
                  >
                    <Memo()
                      key="test"
                      to="/search?query=test"
                    >
                      <Styled(Styled(UnstyledLink))
                        to="/search?query=test"
                      >
                        <UnstyledLink
                          className="sc-AxirZ c10"
                          to="/search?query=test"
                        >
                          <mockConstructor
                            className="sc-AxirZ c10"
                            to="/search?query=test"
                          >
                            <a
                              className="sc-AxirZ c10"
                              href="/search?query=test"
                            >
                              #Test
                            </a>
                          </mockConstructor>
                        </UnstyledLink>
                      </Styled(Styled(UnstyledLink))>
                    </Memo()>
                    <Memo()
                      key="test-too"
                      to="/search?query=test-too"
                    >
                      <Styled(Styled(UnstyledLink))
                        to="/search?query=test-too"
                      >
                        <UnstyledLink
                          className="sc-AxirZ c10"
                          to="/search?query=test-too"
                        >
                          <mockConstructor
                            className="sc-AxirZ c10"
                            to="/search?query=test-too"
                          >
                            <a
                              className="sc-AxirZ c10"
                              href="/search?query=test-too"
                            >
                              #TestToo
                            </a>
                          </mockConstructor>
                        </UnstyledLink>
                      </Styled(Styled(UnstyledLink))>
                    </Memo()>
                  </div>
                </styled.div>
              </div>
            </styled.div>
          </div>
        </styled.div>
      </div>
    </styled.div>
  </Card>
</ThemeProvider>
`;

exports[`Card with no context renders correctly and defaults to list 1`] = `
.c8 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 900;
  line-height: normal;
  -webkit-letter-spacing: 0;
  -moz-letter-spacing: 0;
  -ms-letter-spacing: 0;
  letter-spacing: 0;
  color: hsla(44,8%,18%,1);
  font-size: 18px;
}

.c8 + small {
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 14px letter-spacing:0.1px;
  font-weight: 400;
  line-height: normal;
  color: hsla(44,8%,18%,1);
}

.c10 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  font-family: Merriweather,Georgia,serif;
  font-size: 12px;
  font-weight: 700;
  -webkit-text-decoration-line: underline;
  text-decoration-line: underline;
  padding: 0 8px 0 0;
  white-space: nowrap;
  display: inline-block;
  color: hsla(44,8%,18%,1);
}

.c6 {
  display: block;
  font-weight: 500;
  font-family: Lato,Geneva,Tahoma,sans-serif;
  font-size: 12px;
  padding-bottom: 8px;
  color: hsla(44,8%,18%,1);
}

.c0 {
  padding: 16px 0;
  height: 192px;
}

.c1 {
  height: 100%;
  display: grid;
  grid-gap: 16px;
  grid-template-columns: 1fr 2fr;
}

.c2 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
}

.c3 {
  height: 100%;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  overflow: hidden;
}

.c9 {
  min-width: 0px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 {
  font-family: Merriweather,Georgia,serif;
  font-weight: 700;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c7 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.c7 + small {
  padding: 16px 0;
}

<ThemeProvider
  theme={
    Object {
      "breakpoint": Object {
        "lg": "1184px",
        "md": "980px",
        "mg": "1920px",
        "sm": "768px",
        "xl": "1366px",
        "xs": "480px",
      },
      "color": Object {
        "brand100": "hsla(23,92%,95%,1)",
        "brand200": "hsla(23,92%,82%,1)",
        "brand300": "hsla(23,92%,67%,1)",
        "brand400": "hsla(23,92%,52%,1)",
        "brand500": "hsla(23,92%,35%,1)",
        "brand600": "hsla(23,92%,18%,1)",
        "dark100": "hsla(44,8%,95%,1)",
        "dark200": "hsla(44,8%,82%,1)",
        "dark300": "hsla(44,8%,67%,1)",
        "dark400": "hsla(44,8%,52%,1)",
        "dark500": "hsla(44,8%,35%,1)",
        "dark600": "hsla(44,8%,18%,1)",
        "light": "hsla(0,100%,100%, 1)",
        "withTransparency": Object {
          "brand100": "hsla(23,92%,95%,.5)",
          "brand200": "hsla(23,92%,82%,.5)",
          "brand300": "hsla(23,92%,67%,.5)",
          "brand400": "hsla(23,92%,52%,.5)",
          "brand500": "hsla(23,92%,35%,.5)",
          "brand600": "hsla(23,92%,18%,.5)",
          "dark100": "hsla(44,8%,95%,.5)",
          "dark200": "hsla(44,8%,82%,.5)",
          "dark300": "hsla(44,8%,67%,.5)",
          "dark400": "hsla(44,8%,52%,.5)",
          "dark500": "hsla(44,8%,35%,.5)",
          "dark600": "hsla(44,8%,18%,.5)",
          "light": "hsla(0,100%,100%, .5)",
        },
      },
      "typography": Object {
        "__esModule": true,
        "baseFontSize": Size {
          "_rank": 2,
        },
        "baseLineHeight": "normal",
        "primaryFont": Object {
          "fontFamily": "Merriweather, Georgia, serif",
          "hover": "hsla(44,8%,18%,1)",
        },
        "secondaryFont": Object {
          "fontFamily": "Lato, Geneva, Tahoma, sans-serif",
          "hover": "hsla(44,8%,18%,1)",
        },
      },
      "zIndexRank": Object {
        "0": "0",
        "1": "100",
        "2": "200",
        "3": "300",
        "4": "400",
        "5": "500",
        "6": "600",
        "7": "700",
        "8": "800",
        "9": "900",
        "bottom": "-100",
        "top": "1000",
      },
    }
  }
>
  <Card
    context="list"
    description="description"
    image={
      Object {
        "fixed": Object {
          "base64": "base64",
          "height": 1,
          "src": "src",
          "srcSet": "srcSet",
          "srcSetWebp": "srcSetWebp",
          "srcWebp": "srcWebp",
          "tracedSVG": "tracedSVG",
          "width": 1,
        },
      }
    }
    overline="overline"
    replaceOnTagNavigate={false}
    slug="slug"
    tags={
      Array [
        "test",
        "test-too",
      ]
    }
    title="title"
  >
    <styled.div
      context="list"
    >
      <div
        className="c0"
      >
        <styled.div
          context="list"
        >
          <div
            className="c1"
          >
            <Styled(Styled(UnstyledLink))
              to="slug"
            >
              <UnstyledLink
                className="sc-AxirZ c2"
                to="slug"
              >
                <mockConstructor
                  className="sc-AxirZ c2"
                  to="slug"
                >
                  <a
                    className="sc-AxirZ c2"
                    href="slug"
                  >
                    <Styled(Image)
                      alt="title"
                      context="list"
                      fixed={
                        Object {
                          "base64": "base64",
                          "height": 1,
                          "src": "src",
                          "srcSet": "srcSet",
                          "srcSetWebp": "srcSetWebp",
                          "srcWebp": "srcWebp",
                          "tracedSVG": "tracedSVG",
                          "width": 1,
                        }
                      }
                    >
                      <Image
                        Tag="div"
                        alt="title"
                        className="c3"
                        context="list"
                        durationFadeIn={500}
                        fadeIn={true}
                        fixed={
                          Object {
                            "base64": "base64",
                            "height": 1,
                            "src": "src",
                            "srcSet": "srcSet",
                            "srcSetWebp": "srcSetWebp",
                            "srcWebp": "srcWebp",
                            "tracedSVG": "tracedSVG",
                            "width": 1,
                          }
                        }
                        loading="lazy"
                      >
                        <div
                          className="c3 gatsby-image-wrapper"
                          key="fixed-\\"srcSet\\""
                          style={
                            Object {
                              "display": "inline-block",
                              "height": 1,
                              "overflow": "hidden",
                              "position": "relative",
                              "width": 1,
                            }
                          }
                        >
                          <ForwardRef
                            ariaHidden={true}
                            generateSources={[Function]}
                            imageVariants={
                              Array [
                                Object {
                                  "base64": "base64",
                                  "height": 1,
                                  "src": "src",
                                  "srcSet": "srcSet",
                                  "srcSetWebp": "srcSetWebp",
                                  "srcWebp": "srcWebp",
                                  "tracedSVG": "tracedSVG",
                                  "width": 1,
                                },
                              ]
                            }
                            spreadProps={
                              Object {
                                "alt": "",
                                "className": undefined,
                                "itemProp": undefined,
                                "style": Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                },
                                "title": undefined,
                              }
                            }
                            src="base64"
                          >
                            <ForwardRef
                              alt=""
                              ariaHidden={true}
                              src="base64"
                              style={
                                Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                }
                              }
                            >
                              <img
                                alt=""
                                aria-hidden={true}
                                src="base64"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 1,
                                    "position": "absolute",
                                    "top": 0,
                                    "transitionDelay": "500ms",
                                    "width": "100%",
                                  }
                                }
                              />
                            </ForwardRef>
                          </ForwardRef>
                          <ForwardRef
                            ariaHidden={true}
                            generateSources={[Function]}
                            imageVariants={
                              Array [
                                Object {
                                  "base64": "base64",
                                  "height": 1,
                                  "src": "src",
                                  "srcSet": "srcSet",
                                  "srcSetWebp": "srcSetWebp",
                                  "srcWebp": "srcWebp",
                                  "tracedSVG": "tracedSVG",
                                  "width": 1,
                                },
                              ]
                            }
                            spreadProps={
                              Object {
                                "alt": "",
                                "className": undefined,
                                "itemProp": undefined,
                                "style": Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                },
                                "title": undefined,
                              }
                            }
                            src="tracedSVG"
                          >
                            <ForwardRef
                              alt=""
                              ariaHidden={true}
                              src="tracedSVG"
                              style={
                                Object {
                                  "opacity": 1,
                                  "transitionDelay": "500ms",
                                }
                              }
                            >
                              <img
                                alt=""
                                aria-hidden={true}
                                src="tracedSVG"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 1,
                                    "position": "absolute",
                                    "top": 0,
                                    "transitionDelay": "500ms",
                                    "width": "100%",
                                  }
                                }
                              />
                            </ForwardRef>
                          </ForwardRef>
                          <picture>
                            <source
                              srcSet="srcSetWebp"
                              type="image/webp"
                            />
                            <source
                              srcSet="srcSet"
                            />
                            <ForwardRef
                              alt="title"
                              height={1}
                              loading="lazy"
                              onLoad={[Function]}
                              src="src"
                              srcSet="srcSet"
                              style={
                                Object {
                                  "opacity": 0,
                                  "transition": "opacity 500ms",
                                }
                              }
                              width={1}
                            >
                              <img
                                alt="title"
                                height={1}
                                loading="lazy"
                                onLoad={[Function]}
                                src="src"
                                srcSet="srcSet"
                                style={
                                  Object {
                                    "height": "100%",
                                    "left": 0,
                                    "objectFit": "cover",
                                    "objectPosition": "center",
                                    "opacity": 0,
                                    "position": "absolute",
                                    "top": 0,
                                    "transition": "opacity 500ms",
                                    "width": "100%",
                                  }
                                }
                                width={1}
                              />
                            </ForwardRef>
                          </picture>
                          <noscript
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<picture><source type='image/webp' srcset=\\"srcSetWebp\\" /><source srcset=\\"srcSet\\" /><img loading=\\"lazy\\" width=\\"1\\" height=\\"1\\" srcset=\\"srcSet\\" src=\\"src\\" alt=\\"title\\" style=\\"position:absolute;top:0;left:0;opacity:1;width:100%;height:100%;object-fit:cover;object-position:center\\"/></picture>",
                              }
                            }
                          />
                        </div>
                      </Image>
                    </Styled(Image)>
                  </a>
                </mockConstructor>
              </UnstyledLink>
            </Styled(Styled(UnstyledLink))>
            <styled.div
              context="list"
            >
              <div
                className="c4"
              >
                <Styled(Styled(UnstyledLink))
                  to="slug"
                >
                  <UnstyledLink
                    className="sc-AxirZ c5"
                    to="slug"
                  >
                    <mockConstructor
                      className="sc-AxirZ c5"
                      to="slug"
                    >
                      <a
                        className="sc-AxirZ c5"
                        href="slug"
                      >
                        <styled.span>
                          <span
                            className="c6"
                          >
                            overline
                          </span>
                        </styled.span>
                        <Styled(Heading)
                          level={3}
                        >
                          <Heading
                            className="c7"
                            level={3}
                          >
                            <styled.h3
                              className="c7"
                            >
                              <h3
                                className="c8 c7"
                              >
                                title
                              </h3>
                            </styled.h3>
                          </Heading>
                        </Styled(Heading)>
                      </a>
                    </mockConstructor>
                  </UnstyledLink>
                </Styled(Styled(UnstyledLink))>
                <styled.div>
                  <div
                    className="c9"
                  >
                    <Memo()
                      key="test"
                      to="/search?query=test"
                    >
                      <Styled(Styled(UnstyledLink))
                        to="/search?query=test"
                      >
                        <UnstyledLink
                          className="sc-AxirZ c10"
                          to="/search?query=test"
                        >
                          <mockConstructor
                            className="sc-AxirZ c10"
                            to="/search?query=test"
                          >
                            <a
                              className="sc-AxirZ c10"
                              href="/search?query=test"
                            >
                              #Test
                            </a>
                          </mockConstructor>
                        </UnstyledLink>
                      </Styled(Styled(UnstyledLink))>
                    </Memo()>
                    <Memo()
                      key="test-too"
                      to="/search?query=test-too"
                    >
                      <Styled(Styled(UnstyledLink))
                        to="/search?query=test-too"
                      >
                        <UnstyledLink
                          className="sc-AxirZ c10"
                          to="/search?query=test-too"
                        >
                          <mockConstructor
                            className="sc-AxirZ c10"
                            to="/search?query=test-too"
                          >
                            <a
                              className="sc-AxirZ c10"
                              href="/search?query=test-too"
                            >
                              #TestToo
                            </a>
                          </mockConstructor>
                        </UnstyledLink>
                      </Styled(Styled(UnstyledLink))>
                    </Memo()>
                  </div>
                </styled.div>
              </div>
            </styled.div>
          </div>
        </styled.div>
      </div>
    </styled.div>
  </Card>
</ThemeProvider>
`;
